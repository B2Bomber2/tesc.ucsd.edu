{"version":3,"sources":["pages/DecafPage/components/Company.js","pages/DecafPage/components/FilterBar.js","pages/DecafPage/components/AttendingCompanies.js","pages/DecafPage/AttendingPage.js"],"names":["Avatar","props","name","_styles$name","company","Object","slicedToArray","U.S. Citizen","U.S. Permanent Resident","DACA/Other","International Student Visa","short","style","react_default","a","createElement","Fragment","className","concat","Company","Card","CardBody","CardTitle","href","link","target","CardSubtitle","positions","toString","replace","field","map","f","Badge","color","CardText","description","CardFooter","nationalities","position","Company_Avatar","FilterBar","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","toggle","bind","assertThisInitialized","state","dropdownOpen","setState","prevState","Row","Col","md","Input","placeholder","value","searchValue","onChange","handleSearchChange","react_select_esm","isMulti","options","data","fields","handleFieldChange","handlePositionChange","workAuths","handleWorkAuthChange","Component","AttendingCompanies","createCompanyRows","displayCompanies","displayRows","rowCounter","arraySliceCounter","companyRows","rowView","CardDeck","slice","Company_Company","toConsumableArray","push","filterCompaniesByKeys","companies","keys","keyName","filter","length","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","trim","includes","has","err","return","filterCompaniesBySearchText","text","toLowerCase","indexOf","updatedDECAForders","possibleWA","possiblePositions","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","waString","fieldStr","waArray","posArray","_i","wa","_i2","pos","Set","split","x","dropdownValues","filterDropdowns","rows","Math","ceil","filters","search","_i3","label","toUpperCase","substr","count","_i4","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","fieldSet","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","_i5","check","_i6","pcheck","values","sort","b","newValue","metaAction","fieldFilters","objFilter","objectSpread","event","searchFilter","positionFilter","filterState","waFilter","window","scroll","filteredCompanies","_this$state","Organization","Link","to","components_FilterBar","renderKey","React","AttendingPage","components_AttendingCompanies"],"mappings":"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","file":"static/js/9.f81d173f.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Card, CardBody, CardTitle, CardText, Badge, CardSubtitle, CardFooter, UncontrolledTooltip } from 'reactstrap';\r\n\r\nconst Avatar = (props) => {\r\n\r\n  const {name, company} = props;\r\n\r\n  const styles = {\r\n    'U.S. Citizen': ['US', 'decaf-company__avatar-blue'],\r\n    'U.S. Permanent Resident': ['PR', 'decaf-company__avatar-green'],\r\n    'DACA/Other': ['D/O', 'decaf-company__avatar-yellow'],\r\n    'International Student Visa': ['I', 'decaf-company__avatar-purple']\r\n  }\r\n\r\n  const [short, style] = styles[name]\r\n  return (\r\n    <>\r\n      <span className={`decaf-company__avatar ${style} text-center`}>\r\n        {short}\r\n      </span>\r\n    </>\r\n  )\r\n}\r\n\r\nconst Company = (props) => (\r\n  <Card className=\"\">\r\n    <CardBody>\r\n      <CardTitle className=\"decaf-company__name\"><a href={props.link} target=\"_blank\">{ props.name }</a></CardTitle>\r\n      <CardSubtitle className=\"decaf-company__positions\">{ props.positions.toString().replace(/, /g, \",\").replace(/,/g, \", \") }</CardSubtitle>\r\n      <div className=\"decaf-company__fields\">\r\n          \r\n          {props.field.map(f => <Badge className=\"decaf-company__field\" color=\"info\">{f}</Badge>)}\r\n      </div>\r\n      {/*<div className=\"decaf-company__nationalities\">\r\n        {\r\n          props.nationalities.map((nationality) => <Badge className=\"decaf-company__nationality\" color=\"secondary\">{nationality}</Badge>)\r\n        }\r\n      </div>*/}\r\n      <CardText>{props.description}</CardText>\r\n    </CardBody>\r\n    <CardFooter className=\"decaf-company__footer\">\r\n        {\r\n          props.nationalities.map(position => <Avatar name={position} company={props.name} className=\"decaf-company__avatar\" />)\r\n        }\r\n    </CardFooter>\r\n  </Card>\r\n)\r\n\r\nexport {Company, Avatar};","import React, { Component } from 'react'\r\nimport { Row, Col, Container, Input } from 'reactstrap';\r\nimport Select from 'react-select/';\r\n\r\nclass FilterBar extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.toggle = this.toggle.bind(this);\r\n    this.state = {\r\n      dropdownOpen: false,\r\n    };\r\n  }\r\n\r\n  toggle() {\r\n    this.setState(prevState => ({\r\n      dropdownOpen: !prevState.dropdownOpen\r\n    }));\r\n  }\r\n\r\n  render() {\r\n    return (\r\n        <Row className=\"decaf-companies__filter\">\r\n          <Col md=\"3\" className=\"my-2\">\r\n          <Input name=\"company\" placeholder=\"Company\" value={this.props.searchValue} onChange={this.props.handleSearchChange}/>\r\n          </Col>\r\n          <Col md=\"3\" className=\"my-2\">\r\n            <Select\r\n              isMulti\r\n              options={this.props.data.fields}\r\n              onChange={this.props.handleFieldChange}\r\n              placeholder=\"Industry\"\r\n\r\n            />\r\n          </Col>\r\n          <Col md=\"3\" className=\"my-2\">\r\n            <Select\r\n              isMulti\r\n              options={this.props.data.positions}\r\n              onChange={this.props.handlePositionChange}\r\n              placeholder=\"Work Type\"\r\n            />\r\n          </Col>\r\n          <Col md=\"3\" className=\"my-2\">\r\n            <Select\r\n              isMulti\r\n              options={this.props.data.workAuths}\r\n              onChange={this.props.handleWorkAuthChange}\r\n              placeholder=\"Work Auth\"\r\n            />\r\n          </Col>\r\n        </Row>\r\n\r\n    );\r\n  }\r\n}\r\n\r\nexport default FilterBar;","import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\n\r\nimport {\r\n  CardDeck,\r\n} from 'reactstrap';\r\n\r\nimport {Company, Avatar} from './Company';\r\nimport updatedDECAForders from '../../../data/updatedDECAForders.json'\r\nimport FilterBar from './FilterBar';\r\n\r\nclass AttendingCompanies extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n  \r\n    // Bind filter functions to this\r\n    this.handleFieldChange = this.handleFieldChange.bind(this);\r\n    this.handlePositionChange = this.handlePositionChange.bind(this);\r\n    this.handleWorkAuthChange = this.handleWorkAuthChange.bind(this);\r\n    this.handleSearchChange = this.handleSearchChange.bind(this);\r\n\r\n    // Parse in the json date and filter it accordingly and add to the state then\r\n    let companies = updatedDECAForders.companies\r\n\r\n    // TODO: Wrap this in a function\r\n    // REVIEW: Make this method efficient for bigger data\r\n    const possibleWA = ['U.S. Citizen', 'U.S. Permanent Resident' ,'DACA/Other', 'International Student Visa'];\r\n    const possiblePositions = ['Part-Time', 'Full-Time', 'Internship'];\r\n\r\n    for (let company of companies) {\r\n      let waString = company['Work Authorizations'];\r\n      let position = company['Position Types'];\r\n      let fieldStr = company['Industry Field'];\r\n\r\n      let waArray = []\r\n      let posArray = []\r\n\r\n      for (const wa of possibleWA) {\r\n        if (waString.indexOf(wa) !== -1) {\r\n          waArray.push(wa);\r\n        }\r\n      }\r\n\r\n      for (const pos of possiblePositions) {\r\n        if (position.indexOf(pos) !== -1) {\r\n          posArray.push(pos);\r\n        }\r\n      }\r\n    \r\n      company['Work Authorizations'] = waArray;\r\n      company['Position Types'] = posArray;\r\n      if (typeof company['Industry Field'] === 'string') company['Industry Field'] = new Set(fieldStr.split(',').map(x => x.trim()));\r\n\r\n    }\r\n\r\n      // Filter out the industries and the possibleWA's \r\n      const dropdownValues = this.filterDropdowns(companies);\r\n\r\n    this.state = {\r\n      companies: companies,\r\n      rows: Math.ceil(companies.length / 4),      // subtract 1 to suit array indices that start with 1\r\n      dropdownValues: dropdownValues,\r\n      filters: {positions: [], fields: [], workAuths: [], search: ''} // Default: Filters are empty\r\n    }\r\n  }\r\n\r\n  filterDropdowns(companies) {\r\n    let fields = {};\r\n    \r\n    // NOTE: Hard-coded according to data. \r\n    const possibleWA = ['U.S. Citizen', 'U.S. Permanent Resident' ,'DACA/Other', 'International Student Visa'];\r\n    let workAuths = {};\r\n    for (let wa of possibleWA) {\r\n      workAuths[wa] = {\r\n        value: wa,\r\n        label: wa[0].toUpperCase() + wa.substr(1), \r\n        count: 0,\r\n      };\r\n    }\r\n\r\n    // NOTE: Hard-coded according to data. \r\n    const possiblePositions = ['Part-Time', 'Full-Time', 'Internship'];\r\n    let positions = {};\r\n    for (let position of possiblePositions) {\r\n      positions[position] = {\r\n        value: position,\r\n        label: position[0].toUpperCase() + position.substr(1),\r\n        count: 0,\r\n      }\r\n    }\r\n    \r\n    for (let company of companies) {\r\n      let fieldSet = company['Industry Field'];\r\n      let wa = company['Work Authorizations'];\r\n      let position = company['Position Types'];\r\n\r\n      for (let field of fieldSet) {\r\n        // Create field dictionary\r\n        field = field.trim();\r\n        if (fields[field] === undefined) {\r\n          fields[field] = {\r\n            value: field,\r\n            label: field[0].toUpperCase() + field.substr(1),\r\n            count: 1\r\n          };\r\n        } else {\r\n          fields[field]['count'] += 1;\r\n        }\r\n      }\r\n      \r\n      // Update the count of the workAuths\r\n      for (let check of possibleWA) {\r\n        if (wa.indexOf(check) !== -1) {\r\n          workAuths[check]['count'] += 1;\r\n        }\r\n      }\r\n\r\n      // update the counts in the positions\r\n      for (let pcheck of possiblePositions) {\r\n        if (position.indexOf(pcheck) !== -1) {\r\n          positions[pcheck]['count'] += 1;  \r\n        }\r\n      } \r\n    }\r\n    return { fields: Object.values(fields).sort((a, b) => a.label < b.label ? -1 : 1), \r\n             positions: Object.values(positions), \r\n             workAuths: Object.values(workAuths)\r\n           };\r\n  }\r\n\r\n  // Dropdown event listeners\r\n  handleFieldChange(newValue, metaAction) {\r\n    const fieldFilters = newValue.map((objFilter) => objFilter.value);\r\n  \r\n    // let filterState = {\r\n    //   ...this.state.filters,\r\n    //   workAuths: fieldFilters,\r\n    // }\r\n\r\n    this.setState({\r\n       filters: {\r\n         ...this.state.filters,\r\n         fields: fieldFilters\r\n       }\r\n     });\r\n  }\r\n\r\n  handleSearchChange(event) {\r\n    let searchFilter = {\r\n      ...this.state.filters,\r\n      search: event.target.value.toLowerCase()\r\n    }\r\n\r\n    this.setState({\r\n      filters: searchFilter\r\n    })\r\n  }\r\n\r\n  handlePositionChange(newValue, metaAction) {\r\n    const positionFilter = newValue.map((objFilter) => objFilter.value);\r\n    \r\n    let filterState = {\r\n      ...this.state.filters,\r\n      positions: positionFilter,\r\n    }\r\n\r\n    this.setState({\r\n      filters: filterState\r\n    });\r\n  \r\n  }\r\n\r\n  handleWorkAuthChange(newValue, metaAction) {\r\n    const waFilter = newValue.map((objFilter) => objFilter.value);\r\n  \r\n    let filterState = {\r\n      ...this.state.filters,\r\n      workAuths: waFilter,\r\n    }\r\n\r\n    this.setState({\r\n      filters: filterState\r\n    });\r\n\r\n  }\r\n\r\n  createCompanyRows = (displayCompanies, displayRows) => {\r\n    let rowCounter = 0;\r\n    let arraySliceCounter = 0;\r\n    let numInRow = 3;\r\n    let companyRows = [];           // JSX prints array, so store in the companies as components in this\r\n\r\n    while (rowCounter < displayRows) {\r\n      const rowView = \r\n      <div className=\"decaf-companies__container\">\r\n        <div className=\"card-deck-wrapper\">\r\n          <CardDeck>\r\n            {\r\n              displayCompanies.slice(arraySliceCounter, arraySliceCounter + numInRow).map(company =>\r\n              <Company \r\n                name={company[\"Organization\"]}\r\n                positions={company[\"Position Types\"]}\r\n                field={[...company[\"Industry Field\"]]}\r\n                nationalities={company[\"Work Authorizations\"]}\r\n                description=\"\"\r\n                link={company[\"Link\"]}\r\n              />)\r\n            }\r\n          </CardDeck>\r\n        </div>\r\n      </div>\r\n      \r\n      companyRows.push(rowView);\r\n      rowCounter += 1;\r\n      arraySliceCounter += numInRow;\r\n    }\r\n\r\n    return companyRows;\r\n  }\r\n\r\n  filterCompaniesByKeys = (companies, keys, keyName) => companies.filter((company) => {    // Filter on all the companies everytime\r\n  \r\n      // if there are no filters, return true for every company so that every company is displayed\r\n      if (keys.length === 0) {\r\n        return true;\r\n      }\r\n\r\n      for (let filter of keys) {\r\n        filter = filter.trim();\r\n\r\n        // if any of the filters match the company, return true to display it\r\n        // this is OR filtering\r\n        if (keyName === 'Work Authorizations') {\r\n          if (company['Work Authorizations'].includes(filter)) {\r\n            return true;\r\n          }\r\n        } else if (keyName === 'Position Types') {\r\n          if (company['Position Types'].includes(filter)) {\r\n            return true;\r\n          }\r\n        } else if (keyName == 'Industry Field') {\r\n          if (company['Industry Field'].has(filter)) {\r\n            return true;\r\n          }\r\n        }\r\n      }\r\n      return false;\r\n    });\r\n\r\n  filterCompaniesBySearchText = (companies, text) => companies.filter((company) => {\r\n    return company['Organization'].toLowerCase().indexOf(text) === 0;\r\n  });\r\n\r\n  renderKey() {\r\n    const auths = ['U.S. Citizen','U.S. Permanent Resident','DACA/Other', 'International Student Visa'];\r\n\r\n    return (\r\n      <>\r\n        {auths.map(x => (\r\n            <div className=\"col-md-3 d-flex align-items-center justify-content-center\">\r\n              <span className=\"decaf-company__keyname\">{x}&nbsp;</span><Avatar name={x} />\r\n            </div>\r\n        ))}\r\n      </>\r\n    )\r\n  }\r\n\r\n  componentDidMount() {\r\n    window.scroll(0, 0);\r\n  }\r\n\r\n  render() {\r\n    // Use the filters stored in the state to filter out the companies\r\n    // Apply a total of 4 filter() methods\r\n\r\n    const { companies, filters } = this.state;\r\n    let filteredCompanies;\r\n\r\n    // filtered wa\r\n    filteredCompanies = this.filterCompaniesByKeys(companies, filters.workAuths, 'Work Authorizations');\r\n    \r\n    // filtered positions\r\n    filteredCompanies = this.filterCompaniesByKeys(filteredCompanies, filters.positions, 'Position Types');\r\n    \r\n    // filter by the input text too\r\n    filteredCompanies = this.filterCompaniesBySearchText(filteredCompanies, filters.search);\r\n\r\n    //filter by industry\r\n    filteredCompanies = this.filterCompaniesByKeys(filteredCompanies, filters.fields, 'Industry Field')\r\n\r\n    filteredCompanies = filteredCompanies.sort((a, b) => a.Organization.toLowerCase() < b.Organization.toLowerCase() ? -1 : 1);\r\n\r\n    let displayRows = Math.ceil(filteredCompanies.length / 3);\r\n    return (\r\n      <div className=\"decaf-companies\">\r\n        <div className=\"decaf-companies__head\">\r\n          Companies Attending <Link to=\"/decaf\">Decaf 2020</Link>\r\n        </div>\r\n\r\n        <div className=\"decaf-companies__filterbar\">\r\n          <FilterBar \r\n            data={this.state.dropdownValues}   \r\n            handleFieldChange={this.handleFieldChange}\r\n            handlePositionChange={this.handlePositionChange}\r\n            handleWorkAuthChange={this.handleWorkAuthChange}\r\n            handleSearchChange={this.handleSearchChange}\r\n            searchValue={this.state.filters.search}\r\n          />\r\n\r\n          <div className=\"row mb-4 decaf-companies__key\">\r\n            {this.renderKey()}\r\n          </div>\r\n        </div>\r\n\r\n        {this.createCompanyRows(filteredCompanies, displayRows)}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default AttendingCompanies;","import React from 'react';\r\nimport AttendingCompanies from './components/AttendingCompanies'\r\nclass AttendingPage extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <AttendingCompanies />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AttendingPage;"],"sourceRoot":""}